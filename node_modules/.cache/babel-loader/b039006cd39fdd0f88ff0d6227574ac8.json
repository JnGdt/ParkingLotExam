{"ast":null,"code":"import _toArray from \"C:\\\\Users\\\\jgodi\\\\parkinglotexam\\\\parkinglot-exam\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\jgodi\\\\parkinglotexam\\\\parkinglot-exam\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\Users\\\\jgodi\\\\parkinglotexam\\\\parkinglot-exam\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar initialize = {\n  total_slots: '',\n  filled: '',\n  colors: ['BLACK', 'WHITE', 'BLUE', 'RED'],\n  vehicles: [],\n  available_slots: [],\n  dup_err: 0,\n  regfilter: '',\n  colorfilter: '',\n  slotfilter: ''\n};\n\nvar parking_lot = function parking_lot() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialize;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE_FORM':\n      return Object.assign({}, state, _defineProperty({}, action.field.name, action.field.value));\n\n    case 'POPULATE':\n      var s = [];\n\n      for (var i = state.filled + 1; i <= state.total_slots; i++) {\n        s.push(i);\n      }\n\n      return Object.assign({}, state, {\n        vehicles: generateData(state.filled, state.colors),\n        available_slots: s\n      });\n\n    case 'CLEAR_SLOT':\n      return Object.assign({}, state, {\n        vehicles: state.vehicles.filter(function (item) {\n          return item.slot !== action.slotId;\n        }),\n        filled: state.filled - 1,\n        available_slots: _toConsumableArray(state.available_slots).concat([action.slotId]).sort(function (m, n) {\n          return m - n;\n        })\n      });\n\n    case 'ADD_NEW':\n      if (!checkExists(state.vehicles, action.reg)) {\n        var _state$available_slot = _toArray(state.available_slots),\n            slot = _state$available_slot[0],\n            available = _state$available_slot.slice(1);\n\n        return Object.assign({}, state, {\n          vehicles: [{\n            slot: slot,\n            registration: action.reg,\n            color: action.colour\n          }].concat(_toConsumableArray(state.vehicles)),\n          available_slots: available,\n          filled: state.filled + 1,\n          dup_err: 0\n        });\n      } else return Object.assign({}, state, {\n        dup_err: 1\n      });\n\n    case 'UPDATE_FILTER':\n      return Object.assign({}, state, _defineProperty({}, action.filter.name, action.filter.val));\n\n    default:\n      return state;\n  }\n};\n\nfunction generateData(records, colors) {\n  var cars = [];\n\n  var getRegistration = function getRegistration() {\n    var reg;\n\n    do {\n      reg = 'KA-';\n\n      var area = function area() {\n        var num = getRandom(21);\n        return num > 9 ? num.toString() : '0' + num.toString();\n      };\n\n      var code = function code() {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        return chars[getRandom(chars.length)] + chars[getRandom(chars.length)];\n      };\n\n      var num = (getRandom(9) + 1).toString() + getRandom(10).toString() + getRandom(10).toString() + getRandom(10).toString();\n      reg += area() + '-' + code() + '-' + num;\n    } while (checkExists(cars, reg));\n\n    return reg;\n  };\n\n  for (var i = 1; i <= records; i++) {\n    cars.push({\n      slot: i,\n      registration: getRegistration(),\n      color: colors[getRandom(colors.length)]\n    });\n  }\n\n  return cars;\n}\n\nfunction checkExists(data, key) {\n  var result = false;\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].registration === key) {\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction getRandom(length) {\n  return Math.floor(Math.random() * length);\n}\n\nexport default parking_lot;","map":{"version":3,"sources":["C:\\Users\\jgodi\\parkinglotexam\\parkinglot-exam\\src\\reducers\\index.js"],"names":["initialize","total_slots","filled","colors","vehicles","available_slots","dup_err","regfilter","colorfilter","slotfilter","parking_lot","state","action","type","Object","assign","field","name","value","s","i","push","generateData","filter","item","slot","slotId","sort","m","n","checkExists","reg","available","registration","color","colour","val","records","cars","getRegistration","area","num","getRandom","toString","code","chars","length","data","key","result","Math","floor","random"],"mappings":"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","sourcesContent":["\r\n\tconst initialize = { total_slots:'',\r\n\t\t\t\t\t\tfilled: '',\r\n\t\t\t\t\t\tcolors: ['BLACK', 'WHITE', 'BLUE', 'RED'],\r\n\t\t\t\t\t\tvehicles: [],\r\n\t\t\t\t\t\tavailable_slots: [],\r\n\t\t\t\t\t\tdup_err:0,\r\n\t\t\t\t\t\tregfilter:'',\r\n\t\t\t\t\t\tcolorfilter:'',\r\n\t\t\t\t\t\tslotfilter:''};\r\n\r\n\r\n\tconst parking_lot = (state=initialize, action) => {\r\n\r\n\t\tswitch(action.type){\r\n\r\n\t\t\tcase 'UPDATE_FORM':\r\n\t\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\t\t[action.field.name] : action.field.value\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\tcase 'POPULATE':\r\n\t\t\t\tlet s = [];\r\n\t\t\t\tfor (let i = state.filled+1; i <= state.total_slots; i++) {\r\n\t\t\t\t\ts.push(i);\r\n\t\t\t\t}\r\n\t\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tvehicles:generateData(state.filled, state.colors),\r\n\t\t\t\tavailable_slots:s \r\n\t\t\t\t});\r\n\r\n\t\t\tcase 'CLEAR_SLOT':\r\n\t\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\t\tvehicles: state.vehicles.filter( item => {\r\n\t\t\t\t\t\treturn item.slot !== action.slotId\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tfilled: state.filled-1,\r\n\t\t\t\t\tavailable_slots: [...state.available_slots, action.slotId].sort((m,n) => {return m-n})\r\n\t\t\t\t});\r\n\r\n\t\t\tcase 'ADD_NEW':\r\n\t\t\t\tif(!checkExists(state.vehicles, action.reg)){\r\n\t\t\t\t\tlet [slot, ...available] = state.available_slots;\r\n\t\t\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\t\t\tvehicles: [{slot,registration: action.reg, color:action.colour}, ...state.vehicles],\r\n\t\t\t\t\t\tavailable_slots: available,\r\n\t\t\t\t\t\tfilled: state.filled+1,\r\n\t\t\t\t\t\tdup_err: 0\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\t\t\tdup_err:1\r\n\t\t\t\t\t});\r\n\r\n\t\t\tcase 'UPDATE_FILTER':\r\n\t\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\t\t[action.filter.name]: action.filter.val\r\n\t\t\t\t});\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction generateData(records, colors){\r\n\r\n\t\tlet cars = [];\r\n\t\t\r\n\t\tlet getRegistration = () => {\r\n\r\n\t\t\tlet reg;\r\n\t\t\tdo{\r\n\t\t\treg = 'KA-';\r\n\t\t\tlet area = () => {\r\n\t\t\t\tlet num = getRandom(21);\r\n\t\t\t\treturn (num > 9) ? num.toString() : '0'+num.toString();\r\n\t\t\t}\r\n\r\n\t\t\tlet code = () => {\r\n\t\t\t\tlet chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\t\t\t\treturn chars[getRandom(chars.length)]+chars[getRandom(chars.length)];\r\n\t\t\t}\r\n\r\n\t\t\tlet num = (getRandom(9)+1).toString()+getRandom(10).toString()+getRandom(10).toString()+getRandom(10).toString();\r\n\t\t\treg += area()+'-'+code()+'-'+num;\r\n\t\t\t}while(checkExists(cars, reg));\r\n\r\n\t\t\treturn reg;\r\n\t\t}\r\n\r\n\t\tfor (let i=1; i<=records; i++){\r\n\t\t\tcars.push({slot:i,\r\n\t\t\t\t\t\tregistration: getRegistration(),\r\n\t\t\t\t\t\tcolor:colors[getRandom(colors.length)]\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn cars;\r\n\t}\r\n\r\n\r\n\tfunction checkExists(data, key){\r\n\r\n\t\t\tlet result = false;\r\n\t\t\tfor (let i = 0; i < data.length; i++){\r\n\r\n\t\t\t\tif (data[i].registration === key){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\tfunction getRandom(length){\r\n\r\n\t\treturn Math.floor(Math.random()*length);\r\n\t}\r\n\r\n\texport default parking_lot;"]},"metadata":{},"sourceType":"module"}